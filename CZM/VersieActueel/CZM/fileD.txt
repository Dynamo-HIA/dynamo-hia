(* :Title: CZMDefineScenarios *)

(* :Context: CZMDefineScenarios` *)

(* :Author: Rudolf Hoogenveen *)

(* :Summary:
   CZM simulation routine defines scenarios used for sensitivity analyses *)

(* :Copyright: © 2004 by Rudolf Hoogenveen *)

(* :Package Version: 3.1 *)

(* :Mathematica Version: 5.1 *)

(* :History: 	1.0 first update new implementation CZM July 2004
		2.0 first release CZM 2005, version March
		3.0 version november 2005
		3.1 version March 2007 *)

(* :Keywords: model equations, simulation, sensitivity analyses *)


BeginPackage["CZMDefineScenarios`CZMDefineScenarios`",
	{"CZMInitialization`CZMLogFile`", 
	"CZMImportData`CZMImportUserSelections`",
	"CZMDefineScenarios`CZMDefineScenariosexem`",
	"CZMDefineScenarios`CZMDefineScenariossens`"}] 

makescen::usage 	= "makescen: routine calculates parameter values for each scenario"
deltasens::usage	= "deltasens: relative change of input parameter values used for sensitivity analyses"


Begin["`Private`"]	


Print["CZMDefineScenarios package is evaluated"];
printtijd;

printbug[c_] := If[(bugind == 1), Print[{"CZMDefineScenarios", c}]];

deltasens = .001;

makescen := Switch[analyse,

			0,	makescenexem,
			1,	makescensens,
			3,	makescenexem
			
			];


(* --------------------------------------------------
		Write info to Logfile
----------------------------------------------------*)

(* PACKAGE VERSION *)

version = 3.1;

WriteString[logfile, 
		"\t" <> "Package: " <> StringReplace[Evaluate[Context[]], "`Private`"-> ", " ] 
		<> "version " <> ToString[version] <> "\n\n"];

End[]


Protect[Evaluate[Context[] <> "*"]]


EndPackage[]
(* :Title: CZMDefineScenariosexem *)

(* :Context: CZMDefineScenarios` *)

(* :Author: Rudolf Hoogenveen *)

(* :Summary:
   CZM simulation routine defines exemple scenarios *)

(* :Copyright: © 2005 by Rudolf Hoogenveen *)

(* :Package Version: 3.1 *)

(* :Mathematica Version: 5.1 *)

(* :History: 	1.0 first update new implementation CZM July 2004
		2.0 first release CZM 2005, version March
		3.0 version November 2005 
		3.1 version March 2007; initial distribution BMI. HbA1c *)

(* :Keywords: model equations, simulation, scenarios *)


BeginPackage["CZMDefineScenarios`CZMDefineScenariosexem`",
	{"CZMInitialization`CZMLogFile`"}] 

makescenexem::usage 	= "makescenexem: routine calculates parameter values for each scenario"	


Begin["`Private`"]	


Print["CZMDefineScenariosexem package is evaluated"]

makescenexem := {"

(* PROPORTIONAL TRANSITIONS FROM HIGHER TO LOWER CLASSES *)

makereduct[r_, reduct_] := Block[{}, 

	htransrisk = DiagonalMatrix[Table[1, {ncrsel[[r]]}]];

	If[(riskindd[[r]] == 1),

		htransrisk[[3, 2]] += reduct;
        	htransrisk[[2, 2]] -= reduct

		];

	If[(riskindd[[r]] > 1),

		Do[	htransrisk[[ri, ri + 1]] += reduct;
        		htransrisk[[ri + 1, ri + 1]] -= reduct,

			{ri, ncrsel[[r]] - 1}]

		];

      	htransrisk];


(* DEFAULT PARAMETER VALUES *)

If[(n == 0),

	priskscen	= prisksel;			(* INITIAL (DISCRETE) RISK FACTOR CLASS PREVALENCE RATES FOR SCENARIO *)
	transriskscen 	= transrisksel;			(* (DISCRETE) RISK FACTOR CLASS TRANSITION RATES FOR SCENARIO *)
	distscen	= distsel;			(* INITIAL (CONTINUOUS) RISK FACTOR DISTRIBUTIONAL PARAMETERS *)
	a0contscen	= a0contsel;			(* (CONTINUOUS) RISK FACTOR TRANSITION RATES FOR SCENARIO (INTERCEPT) *)
	a1contscen	= a1contsel;			(* (CONTINUOUS) RISK FACTOR TRANSITION RATES FOR SCENARIO (REGRESSION) *)
	incscen		= incsel;			(* DISEASE INCIDENCE RATES FOR SCENARIO *)
	excessmortscen	= excessmortsel;		(* DISEASE EXCESS MORTALITY RATES FOR SCENARIO *)
	casefatscen	= casefat1;			(* DISEASE CASE FATALITY RATES FOR SCENARIO *)
	RRriskscen	= RRriskseladj;			(* (DISCRETE) RR VALUES FOR SCENARIO *)
	RRcontscen	= RRcontsel;			(* (CONTINUOUS) RR VALUES FOR SCENARIO *)
	trackingscen	= 1;				(* TRACKING OF RISK FACTORS *)
	RRdisscen	= RRdisadj;			(* RELATIVE RISKS FOR ONE DISEASE ON ANOTHER DISEASE INCIDENCE *)
	RRcasefatscen	= RRcasefat1;			(* RELATIVE RISKS FOR ONE DISEASE ON ANOTHER DISEASE CASE FATALITY *)

	If[(RRsmokduurind == 1),			
		relapsecoeffscen = relapsecoeff;	(* SMOKING RELAPSE REGRESSION COEFFICIENTS *)
		logRRsmokduurscen = logRRsmokduur];	(* FORMER SMOKER DISEASE INCIDENCE REGRESION COEFFICIENTS *)

	];

(* --------------------------------------------------
	EXAMPLE SCENARIOS

	SOME NOTES:	SCENARIO x CORREPONDS WITH Mod[scen - 1, nscen0] == x-1
			ALL RISK FACTORS AND DISEASES ARE ORDERED WITHIN SELECTIONS
			ALL PARAMETERS ARE SPECIFIED BY (AT LEAST) GENDER AND AGE-YEAR
			DEFAULT VALUES ARE BASED ON INPUT VALUES 
			IN CASE OF EXTREME SCENARIOS (PROPORTIONS OF REDUCTION) INPUT VALUES MAY BECOME ERRONEOUS, E.G.
				RATES<0 OR >1
----------------------------------------------------*)


If[(n < 0),

	(* EXAMPLE SCENARIO 2 FOR RISK FACTOR CLASS TRANSITION RATES *)

	If[(Mod[scen - 1, nscen0] == 1),

		(* REDUCTION OF RATE VALUES FOR RISK FACTOR 1 CLASS TRANSITION trs (SEE INPUT FILE) WITH PROPORTION reduct
			UNIFORM OVER GENDER AND AGE 
		   trs=1 CORRESPONDS WITH VECTOR OF ZERO VALUED RATES APPLIED TO EVERY NON-DEFINED TRANSITION
		   trs>1 CORRESPONDS WITH RATE VALUES FOR TRANSITION trs-1 (SEE INPUT FILE) *)

		Table[If[(riskindd[[r]] == 4),

			transriskscen[[r, Range[ng], 2]] += .024;
			transriskscen[[r, Range[ng], 4]] += .030],

			{r, nrd}]

		]

	];

If[(n == 0),

	(* EXAMPLE SCENARIO 3 FOR INITIAL RISK FACTOR CLASS PREVALENCE RATES *)

	If[(Mod[scen - 1, nscen0] == 1),

		(* PROPORTION reduct OF PREVALENCE NUMBERS MOVE TO NEXT LOWER CLASS UNIFORM OVER GENDER AND AGE *)
(*
		reduct	= .5;	

		Do[priskscen[[r, g]] = makereduct[r, reduct].priskscen[[r, g]], {r, nrd}, {g, ng}];

		Do[priskscen[[1, g, 1, a]] = 1, {g, ng}, {a, na1}];

		Do[priskscen[[1, g, ri, a]] = 0, {g, ng}, {ri, 2, ncrsel[[1]]}, {a, na1}];
*)

		Do[	If[(riskindd[[r]] == 4)||(riskindd[[r]] == 12), (* INDEX VALUE WAS 4 INSTEAD OF 5 *)
				priskscen[[r]] *= 0;
				priskscen[[r, Range[ng], 1]] += .4;
				priskscen[[r, Range[ng], 2]] += .45;
				priskscen[[r, Range[ng], 3]] += .15];

			If[(riskindd[[r]] == 1),
				priskscen[[r, Range[ng], 3]] += priskscen[[r, Range[ng], 2]];
				priskscen[[r, Range[ng], 2]] *= 0];

			If[(riskindd[[r]] == 2),
				htransrisk	= DiagonalMatrix[Table[1.,{ncrsel[[r]]}]];
					Do[htransrisk[[4 + ri,{ri, 4 + ri}]] = {1.,0.},{ri,4}];
					priskscen[[r]] = Table[Plus@@Table[htransrisk[[rj,ri]] priskscen[[r,g,rj]],
								{rj,ncrsel[[r]]}],
									{g,ng},{ri,ncrsel[[r]]}];
				];


			If[(riskindd[[r]] == 3) && (ncrsel[[r]] == 8),

				Do[	priskscen[[r, g, ri]] += priskscen[[r, g, ri + 4]];
					priskscen[[r, g, 4 + ri]] *= 0,
					{g, ng}, {ri, 4}]],

			{r, nrd}];

		];

	];


If[(n < 0),	
	(* EXAMPLE SCENARIO 4 FOR DISEASE INCIDENCE RATES *)

	If[(Mod[scen - 1, nscen0] == 3),

		(* REDUCTION OF DISEASES dissel INCIDENCE RATES WITH PROPORTION reduct UNIFORM OVER GENDER AND AGE *)

		reduct 	= .1;

		dissel	= {1};

		Do[incscen[[dissel[[d]], g]] = (1 - reduct) incscen[[dissel[[d]], g]], {d, Length[dissel]}, {g, ng}];

		];

	(* EXAMPLE SCENARIO 5 FOR DISEASE EXCESS MORTALITY RATES *)

	If[(Mod[scen - 1, nscen0] == 4),

		(* REDUCTION OF DISEASES dissel EXCESS MORTALITY RATES WITH PROPORTION reduct UNIFORM OVER GENDER AND AGE *)

		reduct 	= .1;

		dissel	= {1};

		Do[excessmortscen[[dissel[[d]], g]] = (1 - reduct) excessmortscen[[dissel[[d]], g]], {d, Length[dissel]}, {g, ng}];

		];
		
	(* EXAMPLE SCENARIO 6 FOR RELATIVE RISKS *)

	If[(Mod[scen - 1, nscen0] == 5),

		(* REDUCTION OF RR'S FOR ALL RISK FACTOR CLASSES (EXCEPT 1ST REFERENCE CLASS) FOR DISEASES dissel WITH PROPORTION reduct
			 UNIFORM OVER GENDER AND AGE *)

		reduct	= .1;

		dissel	= {1};

		Do[RRriskscen[[1, RRriskindsel[[1, dissel[[d]] + 1]], g, ri]] =
			(1 - reduct) RRriskscen[[1, RRriskindsel[[1, dissel[[d]] + 1]], g, ri]],
			{d, Length[dissel]}, {g, ng}, {ri, 2, ncrsel[[1]]}]

		];


];

"};

priskscenind		= 1;
transriskscenind	= 0;
distscenind		= 0;
a0scenind		= 0;
a1scenind		= 0;
incscenind		= 0;
excessmortscenind	= 0;
casefatscenind		= 0;
RRriskscenind		= 0;
RRcontscenind		= 0;
trackingmultind		= 0;
RRdisscenind		= 0;
RRcasefatscenind	= 0;

If[(RRsmokduurind == 1),

	relapsecoeffscenind	= 0;
	logRRsmokduurscenind	= 0];

WriteString[logfile,

	"Scenario Definitions\n\n",

		"\t" <> "nscen: " 		<> ToString[nscen] 		<> "\n\n",
		"\t" <> "priskscenind: " 	<> ToString[priskscenind] 	<> "\n",
		"\t" <> "transriskscenind: " 	<> ToString[transriskscenind] 	<> "\n",
		"\t" <> "distscenind: " 	<> ToString[distscenind] 	<> "\n",
		"\t" <> "a0scenind: " 		<> ToString[a0scenind] 		<> "\n",
		"\t" <> "a1scenind: " 		<> ToString[a1scenind] 		<> "\n",
		"\t" <> "incscenind: " 		<> ToString[incscenind] 	<> "\n",
		"\t" <> "excessmortscenind: " 	<> ToString[excessmortscenind] 	<> "\n",
		"\t" <> "casefatscenind: " 	<> ToString[casefatscenind] 	<> "\n",
		"\t" <> "RRriskscenind: " 	<> ToString[RRriskscenind] 	<> "\n",
		"\t" <> "RRcontscenind: " 	<> ToString[RRriskscenind] 	<> "\n",
		"\t" <> "trackingmultind: " 	<> ToString[trackingmultind] 	<> "\n",
		"\t" <> "RRdisscenind: " 	<> ToString[RRdisscenind] 	<> "\n",
		"\t" <> "RRcasefatscenind: " 	<> ToString[RRcasefatscenind] 	<> "\n",
		"\t" <> "relapsecoeffscenind: "	<> ToString[relapsecoeffscenind] <> "\n",
		"\t" <> "logRRsmokduurscenind: " <> ToString[logRRsmokduurscenind] <> "\n\n"
];


(* --------------------------------------------------
		Write info to Logfile
----------------------------------------------------*)

(* PACKAGE VERSION *)

version = 3.1;

WriteString[logfile, 
		"\t" <> "Package: " <> StringReplace[Evaluate[Context[]], "`Private`"-> ", " ] 
		<> "version " <> ToString[version] <> "\n\n"];

End[]


Protect[Evaluate[Context[] <> "*"]]


EndPackage[]
(* :Title: CZMDefineScenariossens *)

(* :Context: CZMDefineScenarios` *)

(* :Author: Rudolf Hoogenveen *)

(* :Summary:
   CZM simulation routine defines scenarios used for sensitivity analyses *)

(* :Copyright: © 2005 by Rudolf Hoogenveen *)

(* :Package Version: 3.1 *)

(* :Mathematica Version: 5.1 *)

(* :History: 	1.0 first update new implementation CZM July 2004
		2.0 first release CZM 2005, version March
		3.0 version November 2005 
		3.2 version March 2007 *)

(* :Keywords: model equations, simulation, sensitivity analyses *)


BeginPackage["CZMDefineScenarios`CZMDefineScenariossens`",
	{"CZMInitialization`CZMLogFile`",
	"CZMImportData`CZMImportUserSelections`"}] 

makescensens::usage 	= "makescensens: routine calculates parameter values for each scenario"	


Begin["`Private`"]	


Print["CZMDefineScenariossens package is evaluated"]

makescensens := {"

(* DEFAULT PARAMETER VALUES *)

If[(n == 0),

	priskscen	= prisksel;			(* INITIAL (DISCRETE) RISK FACTOR CLASS PREVALENCE RATES FOR SCENARIO *)
	transriskscen 	= transrisksel;			(* (DISCRETE) RISK FACTOR CLASS TRANSITION RATES FOR SCENARIO *)
	distscen	= distsel;			(* INITIAL (CONTINUOUS) RISK FACTOR DISTRIBUTIONAL PARAMETERS *)
(*	a0contscen	= a0contsel;			(* (CONTINUOUS) RISK FACTOR TRANSITION RATES FOR SCENARIO (INTERCEPT) *)
	a1contscen	= a1contsel;			(* (CONTINUOUS) RISK FACTOR TRANSITION RATES FOR SCENARIO (REGRESSION) *)
*)	incscen		= incsel;			(* DISEASE INCIDENCE RATES FOR SCENARIO *)
	excessmortscen	= excessmortsel;		(* DISEASE EXCESS MORTALITY RATES FOR SCENARIO *)
	casefatscen	= casefat1;			(* DISEASE CASE FATALITY RATES FOR SCENARIO *)
	RRriskscen	= RRriskseladj;			(* (DISCRETE) RR VALUES FOR SCENARIO *)
(*	RRcontscen	= RRcontsel;			(* (CONTINUOUS) RR VALUES FOR SCENARIO *)
	trackingscen	= 1;				(* TRACKING OF RISK FACTORS *)
*)	RRdisscen	= RRdisadj;			(* RELATIVE RISKS FOR ONE DISEASE ON ANOTHER DISEASE INCIDENCE *)
	RRcasefatscen	= RRcasefat1;			(* RELATIVE RISKS FOR ONE DISEASE ON ANOTHER DISEASE CASE FATALITY *)

	If[(RRsmokduurind == 1),			
		relapsecoeffscen = relapsecoeff;	(* SMOKING RELAPSE REGRESSION COEFFICIENTS *)
		logRRsmokduurscen = logRRsmokduur];	(* FORMER SMOKER DISEASE INCIDENCE REGRESION COEFFICIENTS *)

nparameters = {	sensparameters[[1]] Plus@@ncrsel,
		sensparameters[[2]] Plus@@Table[Length[transriskscen[[r1, 1]]] - 1, {r1, nrd}],
		sensparameters[[3]] 2 nrc,
		sensparameters[[4]] 2 nrc,
		sensparameters[[5]] nd,
		sensparameters[[6]] nd,
		sensparameters[[7]] nd,
		sensparameters[[8]] nrd,
		sensparameters[[9]] nrc,
		sensparameters[[10]] 1,
		sensparameters[[11]] 1,
		sensparameters[[12]] 1,
		sensparameters[[13]] 2,
		sensparameters[[14]] 2};

nparameters = FoldList[Plus, 0, nparameters];

(* NEW INITIAL (DISCRETE) RISK FACTOR CLASS PREVALENCE RATE VALUES *)

If[(sensparameters[[1]] == 1),

	Do[If[(Mod[scen - 1, ndrawinput] == nparameters[[1]] + Plus@@ncrsel[[Range[r - 1]]] + ri),

		dp1	= Max0[deltasens / (1 - (1 + deltasens) priskscen[[r, Range[ng], ri]])];

		dp2	= dp1 priskscen[[r, Range[ng], ri]] / (1 - priskscen[[r, Range[ng], ri]] + eps);

		priskscen[[r, Range[ng], ri]] *= (1 + dp1);

		Do[If[(rj != ri), priskscen[[r, Range[ng], rj]] *= (1 - dp2)], {rj, ncrsel[[r]]}]],

		{r, nrd}, {ri, ncrsel[[r]]}]];

(* DELTA (DISCRETE) RISK FACTOR CLASS TRANSITION RATE VALUES *)

If[(sensparameters[[2]] == 1),

	Do[If[(Mod[scen - 1, ndrawinput] == nparameters[[2]] + Plus@@Table[Length[transrisksel[[r1, 1]]] - 1, {r1, r - 1}] + ri),

		transriskscen[[r, Range[ng], 1 + ri]] *= (1 + deltasens)],

		{r, nrd}, {ri, Length[transriskscen[[r, 1]]] - 1}]];

(* DELTA INITIAL (CONTINUOUS) RISK FACTOR CLASS PREVALENCE RATES (MU & SIGMA) VALUES *)

If[(sensparameters[[3]] == 1),

	Do[If[(Mod[scen - 1, ndrawinput] == nparameters[[3]] + r),

		distscen[[r, Range[ng], 1]] *= (1 + deltasens)],

		{r, nrc}];

	Do[If[(Mod[scen - 1, ndrawinput] == nparameters[[3]] + nrc + r),

		distscen[[r, Range[ng], 2]] *= (1 + deltasens)],

		{r, nrc}]];

(* DELTA INITIAL (CONTINUOUS) RISK FACTOR CLASS TRANSITION RATES (INTERCEPT A0 & REGRESSION A1) VALUES *)

If[(sensparameters[[4]] == 1),

	Do[If[(Mod[scen - 1, ndrawinput] == nparameters[[4]] + r),

		a0contscen[[r]] *= (1 + deltasens)],

		{r, nrc}];

	Do[If[(Mod[scen - 1, ndrawinput] == nparameters[[4]] + nrc + r),

		a1contscen[[r]] *= (1 + deltasens)],

		{r, nrc}]];

(* DELTA DISEASE INCIDENCE RATE VALUES *)

If[(sensparameters[[5]] == 1),

	Do[If[(Mod[scen - 1, ndrawinput] == nparameters[[5]] + d),

		incscen[[d]] *= (1 + deltasens)],

		{d, nd}]];

(* DELTA DISEASE-RELATED EXCESS MORTALITY RATE VALUES *)

If[(sensparameters[[6]] == 1),

	Do[If[(Mod[scen - 1, ndrawinput] == nparameters[[6]] + d),

		excessmortscen[[d]] *= (1+ deltasens)],

		{d, nd}]];

(* DELTA DISEASE-RELATED CASE FATALITY RATES *)

If[(sensparameters[[7]] == 1),

	Do[If[(Mod[scen - 1, ndrawinput] == nparameters[[7]] + d),

		If[(casefatindsel[[d]] > 1), casefatscen[[casefatindsel[[d]]]] *= (1+ deltasens)]],

		{d, nd}]];

(* DELTA RELATIVE RISK VALUES (DISCRETE) VALUES *)

If[(sensparameters[[8]] == 1),

	Do[If[(Mod[scen - 1, ndrawinput] == nparameters[[8]] + r),

		Do[	RRriskscen[[r, d, g, ri, a]] = RRriskscen[[r, d, g, ri, a]]^(1 + deltasens),
					
			{d, 2, Length[RRriskscen[[r]]]}, {g, ng}, {ri, ncrsel[[r]]}, {a, na1}]],

		{r, nrd}]];

(* DELTA RELATIVE RISK VALUES (CONTINUOUS) *)

If[(sensparameters[[9]] == 1),

	Do[If[(Mod[scen - 1, ndrawinput] == nparameters[[9]] + r),

		RRcontscen[[r]] = RRcontscen[[r]]^(1 + deltasens)],

		{r, nrc}]];

(* DELTA RISK FACTOR TRACKING VALUES *)

If[(sensparameters[[10]] == 1) && (Mod[scen - 1, ndrawinput] == nparameters[[10]] + 1),

		trackingscen *= (1 + deltasens)];

(* DELTA RELATIVE RISK VALUES VALUES ONE DISEASE ON ANOTHER DISEASE INCIDENCE *)

If[(sensparameters[[11]] == 1) && (Mod[scen - 1, ndrawinput] == nparameters[[11]] + 1),

		Do[	RRdisscen[[d, g]] = RRdisadj[[d, g]]^(1 + deltasens), {d, 2, Length[RRdisscen]}, {g, ng}]];

(* DELTA RELATIVE RISK VALUES VALUES ONE DISEASE ON ANOTHER DISEASE CASE FATALITY *)

If[(sensparameters[[12]] == 1) && (Mod[scen - 1, ndrawinput] == nparameters[[12]] + 1),

		Do[	RRcasefatscen[[d, g]] = RRcasefat1[[d, g]]^(1 + deltasens), {d, 2, Length[RRcasefat1]}, {g, ng}]];

(* DELTA RELAPSE REGRESSION COEFFICIENTS FOR FORMER SMOKERS *)

If[(sensparameters[[13]] == 1),

	If[(Mod[scen - 1, ndrawinput] == nparameters[[13]] + 1),

			relapsecoeffscen[[Range[ng], 1]] *= (1 + deltasens)];

	If[(Mod[scen - 1, ndrawinput] == nparameters[[13]] + 2),

			relapsecoeffscen[[Range[ng], 2]] *= (1 + deltasens)]];

(* DELTA DISEASE INCIDENCE REGRESSION COEFFICIENTS FOR FORMER SMOKERS *)

If[(sensparameters[[14]] == 1),

	If[(Mod[scen - 1, ndrawinput] == nparameters[[14]]+ 1),

			Do[logRRsmokduurscen[[d, g, 1]] -= deltasens, {d, 2, Length[logRRsmokduurscen]}, {g, ng}]];

	If[(Mod[scen - 1, ndrawinput] == nparameters[[14]] + 2),

			Do[logRRsmokduurscen[[d, g, 2]] *= (1 + deltasens), {d, 2, Length[logRRsmokduurscen]}, {g, ng}]]];


(* NEW SCENARIO VALUES *)

hscen	= Floor[(scen - 1) / ndrawinput];

If[(hscen == 1),
		Do[	priskscen[[1, g, ncrsel[[1]] - 1]] += priskscen[[1, g, ncrsel[[1]]]];
			priskscen[[1, g, ncrsel[[1]]]] *= 0,
			{g, ng}]];

];

"};

priskscenind		= sensparameters[[1]];
transriskscenind	= sensparameters[[2]];
distscenind		= sensparameters[[3]];
a0scenind		= sensparameters[[4]];
a1scenind		= sensparameters[[4]];
incscenind		= sensparameters[[5]];
excessmortscenind	= sensparameters[[6]];
casefatscenind		= sensparameters[[7]];
RRriskscenind		= sensparameters[[8]];
RRcontscenind		= sensparameters[[9]];
trackingmultind		= sensparameters[[10]];
RRdisscenind		= sensparameters[[11]];
RRcasefatscenind	= sensparameters[[12]];

If[(RRsmokduurind == 1),

	relapsecoeffscenind	= sensparameters[[13]];
	logRRsmokduurscenind	= sensparameters[[14]]];

WriteString[logfile,

	"Scenario Definitions\n\n",

		"\t" <> "nscen: " 		<> ToString[nscen] 		<> "\n\n",
		"\t" <> "priskscenind: " 	<> ToString[priskscenind] 	<> "\n",
		"\t" <> "transriskscenind: " 	<> ToString[transriskscenind] 	<> "\n",
		"\t" <> "distscenind: " 	<> ToString[distscenind] 	<> "\n",
		"\t" <> "a0scenind: " 		<> ToString[a0scenind] 		<> "\n",
		"\t" <> "a1scenind: " 		<> ToString[a1scenind] 		<> "\n",
		"\t" <> "incscenind: " 		<> ToString[incscenind] 	<> "\n",
		"\t" <> "excessmortscenind: " 	<> ToString[excessmortscenind] 	<> "\n",
		"\t" <> "casefatscenind: " 	<> ToString[casefatscenind] 	<> "\n",
		"\t" <> "RRriskscenind: " 	<> ToString[RRriskscenind] 	<> "\n",
		"\t" <> "RRcontscenind: " 	<> ToString[RRriskscenind] 	<> "\n",
		"\t" <> "trackingmultind: " 	<> ToString[trackingmultind] 	<> "\n",
		"\t" <> "RRdisscenind: " 	<> ToString[RRdisscenind] 	<> "\n",
		"\t" <> "RRcasefatscenind: " 	<> ToString[RRcasefatscenind] 	<> "\n",
		"\t" <> "relapsecoeffscenind: "	<> ToString[relapsecoeffscenind] <> "\n",
		"\t" <> "logRRsmokduurscenind: " <> ToString[logRRsmokduurscenind] <> "\n\n"
];


(* --------------------------------------------------
		Write info to Logfile
----------------------------------------------------*)

(* PACKAGE VERSION *)

version = 3.1;

WriteString[logfile, 
		"\t" <> "Package: " <> StringReplace[Evaluate[Context[]], "`Private`"-> ", " ] 
		<> "version " <> ToString[version] <> "\n\n"];

End[]


Protect[Evaluate[Context[] <> "*"]]


EndPackage[]
(* :Title: CZMDefineRuns *)

(* :Context: CZMDefineScenarios` *)

(* :Author: Rudolf Hoogenveen *)

(* :Summary:
   CZM simulation routine defines selections made for different CZM runs *)

(* :Copyright: © 2005 by Rudolf Hoogenveen *)

(* :Package Version:	2.0
			3.0 version November 2005
			3.1 version March 2007  *)

(* :Mathematica Version: 5.1 *)

(* :History: 	version August 2005 *)

(* :Keywords: simulation, selections, runs *)


BeginPackage["CZMDefineScenarios`CZMDefineRuns`",
	{"CZMInitialization`CZMLogFile`", 
	"CZMDefineScenarios`CZMDefineRunstest`"}] 


makerun::usage 		= "makerun: routine makes selections for new CZM runs"	


Begin["`Private`"]	


Print["CZMDefineRuns package is evaluated"];

appltype = StringTake[ToString[Global`application], {8, 11}];

makerun := Switch[appltype,

			"test",	makeruntest,
			_,	""
			
			];


(* --------------------------------------------------
		Write info to Logfile
----------------------------------------------------*)

(* PACKAGE VERSION *)

version = 3.1;

WriteString[logfile, 
		"\t" <> "Package: " <> StringReplace[Evaluate[Context[]], "`Private`"-> ", " ] 
		<> "version " <> ToString[version] <> "\n\n"];

End[]


Protect[Evaluate[Context[] <> "*"]]


EndPackage[]
(* :Title: CZMDefineRunstest *)

(* :Context: CZMDefineScenarios` *)

(* :Author: Rudolf Hoogenveen *)

(* :Summary:
   CZM simulation routine defines selections made for different CZM test runs *)

(* :Copyright: © 2005 by Rudolf Hoogenveen *)

(* :Package Version: 3.1 *)

(* :Mathematica Version: 5.1 *)

(* :History: 	2.1 version August 2005
		3.0 version November 2005 
		3.1 version March 2007 *)

(* :Keywords: simulation, selections, runs *)


BeginPackage["CZMDefineScenarios`CZMDefineRunstest`",
	{"CZMInitialization`CZMLogFile`"}] 


makeruntest::usage 	= "makeruntest: routine makes selections for new CZM runs"	


Begin["`Private`"]	


Print["CZMDefineRunstest package is evaluated"]

makeruntest := {"

	test = ToExpression[StringDrop[ToString[Global`application], 11]];

	analyse	= 3;
	nscen0	= nscen = 1;
	birthind = migpopind = 0;
	riskval	= Global`riskfactor;
	disval	= Global`disease;	
	ageclssel = 16;

	(* TOTAL POPULATION, BASELINE VALUES *)

	If[MemberQ[{1, 4, 7, 14, 29}, test],

		agemin		= 1;
		agemax		= na1;
		nstap		= 1];

	(* COHORT VALUES OVER TIME (AGE) *)

	If[MemberQ[{2, 5, 8, 11, 12, 13, 15, 30}, test],

		agemin		= 61;
		agemax		= 61;
		nstap		= 2]; (* was 20 *)

	(* FIXED AGE VALUES OVER TIME *)

	If[MemberQ[{3, 6, 9, 10, 31}, test],

		agemin		= 1;
		agemax		= na1;
		nstap		= 40];

	(* COMPARING SELECTIONS FOR GIVEN RISK FACTOR ( = GLOBAL VARIABLE riskfactor ) *)

	If[MemberQ[{1, 2, 3, 7, 8, 9, 11, 13, 14, 15}, test],

		excessmortcond 	= 1;
		mortothind 	= 0;
		riskindd	= riskind = {riskval}];

	(* COMPARING SELECTIONS FOR GIVEN DISEASE ( = GLOBAL VARIABLE disease ) *)
						
	If[MemberQ[{4, 5, 6, 12}, test],

		disindrisk	= 0;
		excessmortcond 	= 1;
		mortothind 	= 0];
		
(* TESTING EPIDEMIOLOGICAL SELECTIONS
   - ADJUSTMENT OF EXCESS MORTALITY RATES (EXCESSMORTCOND)
   - EFFECT OF RISK FACTORS THROUGH NON-MODELD DISEASES (MORTOTHIND)
   - SELECTION OF NO DISEASES OR ALL RISK FACTOR RELATED DISEASES (DISINDRISK)
*)

	If[MemberQ[{1, 2, 3}, test],

		disindrisk = 1;
		If[MemberQ[{2, 4, 6, 8}, run], excessmortcond = 2];
		If[MemberQ[{3, 4, 7, 8}, run], disindrisk = 0];
		If[MemberQ[{5, 6, 7, 8}, run], mortothind = 1]];

(* TESTING DISEASE SELECTIONS
   - ADJUSTMENT OF EXCESS MORTALITY RATES USING CALCULATED CO-MORBIDITY RATES (EXCESSMORTCOND = 1)
   - NO EFFECT OF RISK FACTORS THROUGH NON-MODELD DISEASES (MORTOTHIND = 0)
   - SELECTION OF GIVEN DISEASE ONLY OR ALSO CO-MORBID DISEASES
   - SELECTION OF NO/SELECTED RISK FACTORS
*)

	If[MemberQ[{4, 5, 6}, test],

		If[MemberQ[{1, 3}, run], disind0 = {disval}];
		If[MemberQ[{2, 4}, run], disind0 = Union[disind0, {disval}]];
		If[MemberQ[{1, 2}, run], riskind = riskindd = {}]];

(* TESTING RISK FACTOR SELECTIONS
   - ADJUSTMENT OF EXCESS MORTALITY RATES USING CALCULATED CO-MORBIDITY RATES (EXCESSMORTCOND = 1)
   - NO EFFECT OF RISK FACTORS THROUGH NON-MODELD DISEASES (MORTOTHIND = 0)
   - SELECTION OF GIVEN RISK FCTOR ONLY OR ALSO SELECTED RISK FACTORS
   - SELECTION OF NO/SELECTED DISEASES
*)

	If[MemberQ[{7, 8, 9}, test],

		If[MemberQ[{1, 3}, run], disind0 = {}];
		If[MemberQ[{1, 2}, run], riskind = riskindd = {riskval}];
		If[MemberQ[{3, 4}, run], riskind = riskindd = Union[riskind, riskindd, {riskval}]]];

(* TESTING DEMOGRAPHIC PROJECTIONS
   - NEWBORNS OR MIGRATION NUMBERS INCLUDED
   - WITHOUR RISK FACTORS AND DISEASES OR WITH RISK FACTOR SMOKING AND SOME DISEASES INCLUDED
   RESULTS ARE AGE-AGGREGATED NUMBERS OVER TIME
   COMPARING RESULTS OVER TIME
*)

	If[(test == 10),

		disind0		= {};
		birthind	= migpopind = 1;
		If[MemberQ[{2, 4}, run], birthind = 0];
		If[MemberQ[{3, 4}, run], migpopind = 0];
		If[MemberQ[{1, 2, 3, 4}, run], riskind = riskindd = {}; disind0 = {}]];

(* TESTING CZM MODEL VERSIONS ON RISK FACTORS
   - SELECTION OF NO/SELECTED DISEASES
   - SELECTION OF DIFFERENT MODEL VERSIONS (THROUGH USERINPUT)
   RESULTS ARE AGE-AGGREGATED NUMBERS OVER TIME
   COMPARING RESULTS OVER TIME
*)

	If[(test == 11),

		If[(run == 2),	disindrisk = 0; disind0 = {}]]; 

(* TESTING CZM MODEL VERSIONS ON DISEASES
   - SELECTION OF NO/SELECTED RISK FACTORS
   - SELECTION OF DIFFERENT MODEL VERSIONS (THROUGH USERINPUT)
   RESULTS ARE AGE-AGGREGATED NUMBERS OVER TIME
   COMPARING RESULTS OVER TIME
*)

	If[(test == 12),

		If[(run == 2),	riskindd = riskind0 = {}]]; 

(* TESTING ONE CZM MODEL VERSION ON RISK FACTOR SMOKING AGE AND DURATION DEPENDENT
   MARGINAL DETERMINISTIC MODEL
   COMPARING RESULTS OVER TIME
*)

	If[(test == 13),

		riskindd	= riskind = {1};
		RRsmokduurind	= 0;
		disindrisk	= 0;
		disind0		= {};
		nstap		= 1;
		modelsel	= {0, 0, 0, 1, 0, 0, 0};
		If[MemberQ[{2, 4}, run], RRsmokduurind = 1];
		If[MemberQ[{3, 4}, run], (*disindrisk = 1*) disind0 = {6}]];

(* TESTING ONE CZM MODEL VERSION ON RISK FACTOR
   - SELECTION OF DISEASES (THROUGH USERINPUT)
   - SELECTION OF DIFFERENT MODEL VERSIONS (THROUGH USERINPUT)
   COMPARING RESULTS AT BASELINE
*)

	If[MemberQ[{14, 15}, test], _]; 

(* TESTING CZM ON USE OF EMPIRICAL DATA FOR DIABETICS
*)

	If[MemberQ[{29, 30, 31}, test],

		disind0	= {7};
		patientsel = 70;
		riskindd = riskind = {2};
		nscen0 = nscen = 2;
		userriskdata = 0;
		If[MemberQ[{1}, rn], userriskdata = 1];
		excessmortcond	= 3;
		mortothind	= 1];





(* COMMENT ON USER SELECTIONS OVERRULED *)

	Print[FromCharacterCode[{84, 101, 115, 116, 105, 110, 103, 58, 32, 97, 103, 101, 
				109, 105, 110, 44, 32, 97, 103, 101, 109, 97, 120, 44, 32, 101, 120, 99, 
				101, 115, 115, 109, 111, 114, 116, 99, 111, 110, 100, 44, 32, 109,
				111, 114, 116, 111, 116, 104, 105, 110, 100, 44, 32, 110, 115, 99, 101, 
				110, 40, 48, 41, 44, 32, 97, 110, 97, 108, 121, 115, 101, 44, 32, 
				110, 115, 116, 97, 112, 44, 32, 114, 105, 115, 107, 105, 110, 100, 
				40, 100, 41, 44, 32, 100, 105, 115, 105, 110, 100, 40, 48, 41, 44, 32,
				100, 105, 115, 105, 110, 100, 114, 105, 115, 107, 32, 115, 101, 108, 101,
				99, 116, 105, 111, 110, 115, 32, 111, 118, 101, 114, 114, 117, 108, 101, 100}]];

"};


(* --------------------------------------------------
		Write info to Logfile
----------------------------------------------------*)

(* PACKAGE VERSION *)

version = 3.1;

WriteString[logfile, 
		"\t" <> "Package: " <> StringReplace[Evaluate[Context[]], "`Private`"-> ", " ] 
		<> "version " <> ToString[version] <> "\n\n"];

End[]


Protect[Evaluate[Context[] <> "*"]]


EndPackage[]
