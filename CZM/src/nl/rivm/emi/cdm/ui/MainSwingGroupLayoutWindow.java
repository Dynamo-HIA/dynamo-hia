package nl.rivm.emi.cdm.ui;

import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.util.ArrayList;
import java.util.List;

import javax.swing.GroupLayout;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JProgressBar;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import javax.swing.GroupLayout.ParallelGroup;
import javax.swing.GroupLayout.SequentialGroup;

import nl.rivm.emi.cdm.simulation.Simulation;
import nl.rivm.emi.cdm.util.log4j.Swing2LogConnectorSingleton;
import nl.rivm.emi.cdm.util.log4j.SwingAppender.SwingLogOutputStream;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

public class MainSwingGroupLayoutWindow extends JPanel implements
		ActionListener, SelectSimDirInterface, LoadDataInterface {

	Log log = LogFactory.getLog(this.getClass().getSimpleName());

	private static final long serialVersionUID = 1L;

	private JFrame frame = null;

	public final String selectSimDirCaption = "Select";
	public final String simulationDirectoryFieldInitialText = "First select a simulation directory";
	public final String compileCaption = "Compile";
	public final String loadDataCaption = "Load data";
	public final String runCaption = "Run";
	public final String interruptCaption = "Interrupt";

	// private ButtonGroup buttonGroup1;
	private JButton simulationButton;
	private JButton compileButton;
	private JButton loadDataButton;
	private JButton runButton;
	private JButton interruptButton;
	private JProgressBar progressBar;
	private JScrollPane scrollPane;
	private JTextArea textArea;
	private JLabel label;
	private JTextField simulationDirectoryField;

	private SwingLogWorker logSwingWorker = null;

	private SelectSimDirWorker simDirSelectWorker = null;
	private CompilerWorker compilerWorker = null;
	private LoadDataWorker loadDataWorker = null;
	private SimulationRunWorker simRunWorker = null;

	File simulationDirectory = null;

	Simulation simulation = null;

	public MainSwingGroupLayoutWindow() {
		super();
		log.info("Constructing.");
		frame = new JFrame("LogWindow");
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		// createContent();
		constructAndLayoutComponents();
		simulationButton.setEnabled(true);
		frame.setContentPane(this);
		frame.pack();
		frame.setVisible(true);
		// Autostart logging..
		logSwingWorker = this.new SwingLogWorker();
		logSwingWorker.execute();
	}

	/**
	 * Layout has been adapted from one generated by NetBeans.
	 * 
	 * 
	 */
	private void constructAndLayoutComponents() {

		// buttonGroup1 = new javax.swing.ButtonGroup();
		label = new JLabel("Simulation directory");
		simulationDirectoryField = new JTextField(
				simulationDirectoryFieldInitialText);
		progressBar = new javax.swing.JProgressBar();
		simulationButton = makeButton4GroupLayout(selectSimDirCaption);
		compileButton = makeButton4GroupLayout(compileCaption);
		loadDataButton = makeButton4GroupLayout(loadDataCaption);
		runButton = makeButton4GroupLayout(runCaption);
		interruptButton = makeButton4GroupLayout(interruptCaption);
		scrollPane = new javax.swing.JScrollPane();
		textArea = new javax.swing.JTextArea();

		textArea.setColumns(60);
		textArea.setRows(10);
		scrollPane.setViewportView(textArea);
		scrollPane.setMinimumSize(new Dimension(150, 75));
		scrollPane.setPreferredSize(new Dimension(150, 75));
		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
		setLayout(layout);

		SequentialGroup horSeqGroup1 = layout.createSequentialGroup();
		horSeqGroup1.addContainerGap();
		horSeqGroup1.addComponent(label);
		horSeqGroup1
				.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED);
		horSeqGroup1.addComponent(simulationDirectoryField);
		horSeqGroup1
				.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED);
		horSeqGroup1.addComponent(simulationButton);
		horSeqGroup1.addContainerGap();

		SequentialGroup horSeqGroup2 = layout.createSequentialGroup();
		horSeqGroup2.addContainerGap();
		// +micro2
		horSeqGroup2.addComponent(simulationButton);
		horSeqGroup2
				.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED);
		// ~+micro2
		horSeqGroup2.addComponent(compileButton);
		// seqGroup.addPreferredGap(
		// javax.swing.LayoutStyle.ComponentPlacement.RELATED, 146,
		// Short.MAX_VALUE);
		horSeqGroup2
				.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED);
		// +micro2
		horSeqGroup2.addComponent(loadDataButton);
		horSeqGroup2
				.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED);
		// ~+micro2
		horSeqGroup2.addComponent(runButton);
		horSeqGroup2
				.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED);
		horSeqGroup2.addComponent(interruptButton);
		horSeqGroup2.addGap(9, 9, 9);

		ParallelGroup horParGroup = layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING);
		horParGroup.addGroup(horSeqGroup1);
		horParGroup.addComponent(progressBar,
				javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE);
		horParGroup.addGroup(horSeqGroup2);
		horParGroup.addComponent(scrollPane,
				javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE);

		layout.setHorizontalGroup(horParGroup);

		ParallelGroup vertParGroup1 = layout.createParallelGroup(
				GroupLayout.Alignment.BASELINE, false);
		vertParGroup1.addComponent(label);
		vertParGroup1.addComponent(simulationDirectoryField);
		vertParGroup1.addComponent(simulationButton);

		ParallelGroup vertParGroup2 = layout.createParallelGroup(
				GroupLayout.Alignment.BASELINE, false);
		vertParGroup2.addComponent(simulationButton);
		vertParGroup2.addComponent(compileButton);
		vertParGroup2.addComponent(loadDataButton);
		vertParGroup2.addComponent(runButton);
		vertParGroup2.addComponent(interruptButton);

		SequentialGroup vertSeqGroup = layout.createSequentialGroup();
		vertSeqGroup.addGroup(vertParGroup1);
		vertSeqGroup.addGroup(vertParGroup2);
		vertSeqGroup.addComponent(progressBar,
				javax.swing.GroupLayout.PREFERRED_SIZE,
				javax.swing.GroupLayout.DEFAULT_SIZE,
				javax.swing.GroupLayout.PREFERRED_SIZE);
		vertSeqGroup
				.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED);
		vertSeqGroup.addGroup(vertParGroup2);
		vertSeqGroup
				.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED);
		vertSeqGroup.addComponent(scrollPane, GroupLayout.PREFERRED_SIZE,
				GroupLayout.PREFERRED_SIZE, 300);
		vertSeqGroup.addContainerGap(GroupLayout.DEFAULT_SIZE,
				GroupLayout.DEFAULT_SIZE);
		layout.setVerticalGroup(vertSeqGroup);
		frame.pack();
	}// </editor-fold>

	private JButton makeButton4GroupLayout(String caption) {
		JButton buttonReference = new JButton(caption);
		buttonReference.setActionCommand(caption);
		buttonReference.addActionListener(this);
		buttonReference.setEnabled(false);
		return buttonReference;
	}

	public void actionPerformed(ActionEvent e) {
		if (selectSimDirCaption.equals(e.getActionCommand())) {
			startSelectSimDir();
		} else if (compileCaption.equals(e.getActionCommand())) {
			compileButton.setEnabled(false);
			runButton.setEnabled(false);
			compilerWorker = new CompilerWorker(this, simulationDirectory);
			compilerWorker
					.addPropertyChangeListener(new PropertyChangeListener() {
						public void propertyChange(PropertyChangeEvent evt) {
							if ("progress".equals(evt.getPropertyName())) {
								progressBar.setValue((Integer) evt
										.getNewValue());
							}
						}
					});

			compilerWorker.execute();
		} else if (loadDataCaption.equals(e.getActionCommand())) {
			startLoadData();
		} else if (runCaption.equals(e.getActionCommand())) {
			runButton.setEnabled(false);
			compileButton.setEnabled(false);
			interruptButton.setEnabled(true);
			simRunWorker = new SimulationRunWorker(this, simulation, null, null);
			simRunWorker
					.addPropertyChangeListener(new PropertyChangeListener() {
						public void propertyChange(PropertyChangeEvent evt) {
							if ("progress".equals(evt.getPropertyName())) {
								progressBar.setValue((Integer) evt
										.getNewValue());
							}
						}
					});

			simRunWorker.execute();
		} else if (interruptCaption.equals(e.getActionCommand())) {
			interruptButton.setEnabled(false);
			simRunWorker.cancel(true);
		} else if ("CompileDone".equals(e.getActionCommand())) {
			compileButton.setEnabled(false);
			loadDataButton.setEnabled(true);
			runButton.setEnabled(false);
			interruptButton.setEnabled(false);
			compilerWorker = null;
		} else if ("RunDone".equals(e.getActionCommand())) {
			compileButton.setEnabled(true);
			runButton.setEnabled(true);
			simRunWorker = null;
		} else {
			log.fatal("Unknow actionCommand: " + e.getActionCommand());
		}
	}

	private void startSelectSimDir() {
		simulationButton.setEnabled(false);
		simDirSelectWorker = new SelectSimDirWorker(this);
		simDirSelectWorker.execute();
	}

	public void finishSelectSimDir(File simulationDirectory) {
		this.simulationDirectory = simulationDirectory;
		if (simulationDirectory != null) {
			simulationDirectoryField.setText(simulationDirectory
					.getAbsolutePath());
			compileButton.setEnabled(true);
		} else {
			simulationButton.setEnabled(true);
			// runButton.setEnabled(true);
		}
	}

	private void startLoadData() {
		log.info("Entering startLoadData()");
		compileButton.setEnabled(false);
		loadDataButton.setEnabled(false);
		runButton.setEnabled(false);
		interruptButton.setEnabled(false);
		progressBar.setValue(0);
		loadDataWorker = new LoadDataWorker(this, simulationDirectory);
		loadDataWorker.addPropertyChangeListener(new PropertyChangeListener() {
			public void propertyChange(PropertyChangeEvent evt) {
				if ("progress".equals(evt.getPropertyName())) {
					progressBar.setValue((Integer) evt.getNewValue());
				}
			}
		});
		loadDataWorker.execute();
	}

	@Override
	public void finishLoadData(Simulation simulation) {
		log.info("Entering finishLoadData()");
		if (simulation != null) {
			this.simulation = simulation;
			compileButton.setEnabled(false);
			// TODO Change back after testing.
//			loadDataButton.setEnabled(false);
			loadDataButton.setEnabled(true);
			runButton.setEnabled(true);
			interruptButton.setEnabled(false);
		} else {
			compileButton.setEnabled(false);
			// TODO Change back after testing.
//			loadDataButton.setEnabled(false);
			loadDataButton.setEnabled(true);
			runButton.setEnabled(false);
			interruptButton.setEnabled(false);
		}
	}

	public class SwingLogWorker extends SwingWorker<Void, String> {
		Log workerLog = LogFactory.getLog(getClass().getSimpleName());
		SwingLogOutputStream logStream = null;
		String logLine;

		ArrayList<String> logList = new ArrayList<String>();

		public SwingLogWorker() {
			super();
		}

		@Override
		public Void doInBackground() {
			workerLog.info("doInBackground() called.");
			Void pietje = null;
			try {
				int count = 0;
				while (!isCancelled()) {
					if (logStream == null) {
						workerLog.info("Trying to get the logStream.");
						Swing2LogConnectorSingleton connector = Swing2LogConnectorSingleton
								.getInstance();
						logStream = connector.getTheStream();
						Thread.sleep(1000);
					} else {
						// if (logLine == null) {
						// logLine = logStream.read();
						String publishString = logStream.read()/* null */;
						// if (logLine != null) {
						if (publishString != null) {
							logList.add(publishString);
							if (logList.size() > 10) {
								logList.remove(0);
							}
							publish(publishString);
							workerLog.info("Published: " + publishString);
						} else {
							Thread.sleep(100);
						}
					}
					count++;
				}
				return (pietje);
			} catch (InterruptedException e) {
				e.printStackTrace();
				workerLog.info("Sleep has been interrupted.");
				return (pietje);
			}
		}

		protected void process(List<String> logLines) {
			workerLog.info("process() called.");
			// String logLine = logLines.get(logLines.size() - 1);
			StringBuffer logWindowSB = new StringBuffer();
			for (String logEntry : logList) {
				logWindowSB.append(logEntry);
			}
			textArea.setText(logWindowSB.toString());
		}

		@Override
		public void done() {
			workerLog.info("done() called.");
		}
	};

	public static void main(String s[]) {
		SwingUtilities.invokeLater(new Runnable() {
			public void run() {
				new MainSwingGroupLayoutWindow();
			}
		});
	}

}
